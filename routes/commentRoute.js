import * as express from "express";
import { Comment } from "../models/comment.js";
import { authenticateToken, isAdmin } from "./userRoute.js";
const router = express.Router();
export { router as commentRoutes };

/**
 * @swagger
 * tags:
 *   name: Comments
 *   description: Comment API for my portfolio project
 */
// get all comments
/**
 * @swagger
 *   components:
 *    schemas:
 *       Comment:
 *          type:  object
 *          required:
 *             - name
 *             - email
 *             - location
 *             - comment
 *             - created
 *             - updated
 *
 *          properties:
 *                  id:
 *                     type: string
 *                     description: auto generated by mongoose
 *                  name:
 *                     type: string
 *                     description: name of the comment sender
 *                  email:
 *                     type: string
 *                     description: email of the comment sender
 *                  location:
 *                     type: object
 *                     description: Location of the comment sender*
 *                     required:
 *                          - latitude
 *                          - longitude
 *                     properties:
 *                          latitude:
 *                            type: number
 *                            description: The latitude of the comment sender
 *                          longitude:
 *                            type: string
 *                            description: The longitude of the comment sender
 *                  comment:
 *                     type: string
 *                     description: comment of the comment sender
 *                  created:
 *                     type: Date
 *                     description: date when the comment was sent
 *                  updated:
 *                     type: Date
 *                     description: date when the comment was updated
 */

/**
 * @swagger
 * /api/comments:
 *    get:
 *      tags: [Comment]
 *      summary: Returns all the comments
 *      responses:
 *         200:
 *            description: The list of all comments
 *            content:
 *               application/json:
 *                   schemas:
 *                      type: array
 *                      items:
 *                         $ref: '#/components/schemas/Comment'
 *
 */
// get all comments
router.get("/comments", async (req, res) => {
  const comments = await Comment.find();
  res.send(comments);
});

//  getting individual comment route

/**
 * @swagger
 * /api/comment/{id}:
 *  get:
 *   summary: get the comment by id
 *   tags: [Comment]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: comment Id
 *   responses:
 *       200:
 *         description: The comment was successfully retrieved
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Comment'
 *       404:
 *         description: The comment with that id was not found
 */
// router.get("/comment/:id", authenticateToken, isAdmin, async (req, res) => {
router.get("/comment/:id", async (req, res) => {
  try {
    const comment = await Comment.findOne({ _id: req.params.id });

    res.send(comment);
  } catch {
    res.status(404).send({ error: "this comment does not exist" });
  }
});
// create a new comment
/**
 * @swagger
 * /api/comment:
 *    post:
 *      summary: create a new comment
 *      tags: [Comment]
 *      requestBody:
 *         type: object
 *         required: true
 *         content:
 *            application/json:
 *                  schema:
 *                     $ref: '#/components/schemas/Comment'
 *      responses:
 *         200:
 *            description: The comment was successfully created
 *            content:
 *               application/json:
 *                    schemas:
 *                        $ref: '#/components/schemas/Comment'
 *         500:
 *            description: Server Error
 *
 *
 */
router.post("/comment/:id", authenticateToken, async (req, res) => {
  // router.post("/comment/:id", async (req, res) => {
  console.log(req.user);
  const comment = new Comment({
    articleId: req.params.id,
    userId: req.user.id,
    commentor: req.user.name,
    comment: req.body.comment,
  });
  console.log(comment);
  try {
    await comment.save();
    console.log("comment saved");
    return res.status(200).send(comment);
  } catch {
    return res.status(400);
  }
});

// Deleting a comment route

/**
 * @swagger
 * /api/comment/{id}:
 *  delete:
 *   summary: delete the comment by id
 *   tags: [Comment]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: comment Id
 *   responses:
 *       204:
 *         description: The comment was successfully deleted
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Comment'
 *       404:
 *         description: The comment with that id was not found
 */
router.delete("/comment/:id", authenticateToken, isAdmin, async (req, res) => {
  try {
    await Comment.deleteOne({ _id: req.params.id });
    res.status(204).send();
  } catch {
    res.status(404).send({ error: "That comment does not exist " });
  }
});
