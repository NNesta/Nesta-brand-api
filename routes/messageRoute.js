import * as express from "express";
import { Message } from "../models/message.js";
import { authenticateToken, isAdmin } from "./userRoute.js";
const router = express.Router();
export { router as messageRoutes };

/**
 * @swagger
 * tags:
 *   name: Messages
 *   description: Message API for my portfolio project
 */
// get all messages
/**
 * @swagger
 *   components:
 *    schemas:
 *       Message:
 *          type:  object
 *          required:
 *             - name
 *             - email
 *             - location
 *             - message
 *             - created
 *             - updated
 *
 *          properties:
 *                  id:
 *                     type: string
 *                     description: auto generated by mongoose
 *                  name:
 *                     type: string
 *                     description: name of the message sender
 *                  email:
 *                     type: string
 *                     description: email of the message sender
 *                  location:
 *                     type: object
 *                     description: Location of the message sender*
 *                     required:
 *                          - latitude
 *                          - longitude
 *                     properties:
 *                          latitude:
 *                            type: number
 *                            description: The latitude of the message sender
 *                          longitude:
 *                            type: string
 *                            description: The longitude of the message sender
 *                  message:
 *                     type: string
 *                     description: message of the message sender
 *                  created:
 *                     type: Date
 *                     description: date when the message was sent
 *                  updated:
 *                     type: Date
 *                     description: date when the message was updated
 */

/**
 * @swagger
 * /api/message:
 *    get:
 *      tags: [Message]
 *      summary: Returns all the messages
 *      responses:
 *         200:
 *            description: The list of all messages
 *            content:
 *               application/json:
 *                   schemas:
 *                      type: array
 *                      items:
 *                         $ref: '#/components/schemas/Message'
 *
 */
// get all messages
router.get("/message", authenticateToken, isAdmin, async (req, res) => {
  const messages = await Message.find();
  res.send(messages);
});

//  getting individual message route

/**
 * @swagger
 * /api/message/{id}:
 *  get:
 *   summary: get the message by id
 *   tags: [Message]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: message Id
 *   responses:
 *       200:
 *         description: The message was successfully retrieved
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Message'
 *       404:
 *         description: The message with that id was not found
 */
router.get("/message/:id", authenticateToken, isAdmin, async (req, res) => {
  try {
    const message = await Message.findOne({ _id: req.params.id });

    res.send(message);
  } catch {
    res.status(404).send({ error: "this message does not exist" });
  }
});
// create a new message
/**
 * @swagger
 * /api/message:
 *    post:
 *      summary: create a new message
 *      tags: [Message]
 *      requestBody:
 *         type: object
 *         required: true
 *         content:
 *            application/json:
 *                  schema:
 *                     $ref: '#/components/schemas/Message'
 *      responses:
 *         200:
 *            description: The message was successfully created
 *            content:
 *               application/json:
 *                    schemas:
 *                        $ref: '#/components/schemas/Message'
 *         500:
 *            description: Server Error
 *
 *
 */
router.post("/message", async (req, res) => {
  const message = new Message({
    name: req.body.name,
    email: req.body.email,
    message: req.body.message,
  });
  try {
    await message.save();
    return res.status(200).send(message);
  } catch {
    return res.status(400);
  }
});
// updating a Message route

/**
 * @swagger
 * /api/message/{id}:
 *  patch:
 *   summary: Update the message by id
 *   tags: [Message]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: message Id
 *   requestBody:
 *         type: object
 *         required: true
 *         content:
 *            application/json:
 *                  schema:
 *                     $ref: '#/components/schemas/Message'
 *   responses:
 *       200:
 *         description: The Message was successfully update
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Message'
 *       404:
 *         description: The message with that id was not found
 *       500:
 *         description: Server Error
 */
router.patch("/message/:id", authenticateToken, isAdmin, async (req, res) => {
  try {
    const message = await Message.findById(req.params.id);
    if (req.body.name) {
      message.name = req.body.name;
    }
    if (req.body.email) {
      message.email = req.body.email;
    }
    if (req.body.message) {
      message.message = req.body.message;
    }

    await message.save();
    res.json(message);
  } catch {
    res.status(404);
    res.send({
      err: "The post with the given " + req.params.id + " does not exist",
    });
  }
});

// Deleting a message route

/**
 * @swagger
 * /api/message/{id}:
 *  delete:
 *   summary: delete the message by id
 *   tags: [Message]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: message Id
 *   responses:
 *       204:
 *         description: The message was successfully deleted
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Message'
 *       404:
 *         description: The message with that id was not found
 */
router.delete("/message/:id", authenticateToken, isAdmin, async (req, res) => {
  try {
    await Message.deleteOne({ _id: req.params.id });
    res.status(204).send();
  } catch {
    res.status(404).send({ error: "That post is not available " });
  }
});
