import * as express from "express";
import { Like } from "../models/like.js";
import { authenticateToken, isAdmin } from "./userRoute.js";
const router = express.Router();
export { router as likeRoutes };

/**
 * @swagger
 * tags:
 *   name: Likes
 *   description: Like API for my portfolio project
 */
// get all likes
/**
 * @swagger
 *   components:
 *    schemas:
 *       Like:
 *          type:  object
 *          required:
 *             - name
 *             - email
 *             - location
 *             - like
 *             - created
 *             - updated
 *
 *          properties:
 *                  id:
 *                     type: string
 *                     description: auto generated by mongoose
 *                  name:
 *                     type: string
 *                     description: name of the like sender
 *                  email:
 *                     type: string
 *                     description: email of the like sender
 *                  location:
 *                     type: object
 *                     description: Location of the like sender*
 *                     required:
 *                          - latitude
 *                          - longitude
 *                     properties:
 *                          latitude:
 *                            type: number
 *                            description: The latitude of the like sender
 *                          longitude:
 *                            type: string
 *                            description: The longitude of the like sender
 *                  like:
 *                     type: string
 *                     description: like of the like sender
 *                  created:
 *                     type: Date
 *                     description: date when the like was sent
 *                  updated:
 *                     type: Date
 *                     description: date when the like was updated
 */

/**
 * @swagger
 * /api/like:
 *    get:
 *      tags: [Like]
 *      summary: Returns all the likes
 *      responses:
 *         200:
 *            description: The list of all likes
 *            content:
 *               application/json:
 *                   schemas:
 *                      type: array
 *                      items:
 *                         $ref: '#/components/schemas/Like'
 *
 */
// get all likes
router.get("/like", async (req, res) => {
  const likes = await Like.find();
  res.send(likes);
});

// //  getting individual like route

// /**
//  * @swagger
//  * /api/like/{id}:
//  *  get:
//  *   summary: get the like by id
//  *   tags: [Like]
//  *   parameters:
//  *      - in: path
//  *        name: id
//  *        schema:
//  *           type: string
//  *        required: true
//  *        description: like Id
//  *   responses:
//  *       200:
//  *         description: The like was successfully retrieved
//  *         contents:
//  *            application/json:
//  *                schema:
//  *                   $ref: '#/components/schemas/Like'
//  *       404:
//  *         description: The like with that id was not found
//  */
// router.get("/like/:id", authenticateToken, isAdmin, async (req, res) => {
//   try {
//     const like = await Like.findOne({ _id: req.params.id });

//     res.send(like);
//   } catch {
//     res.status(404).send({ error: "this like does not exist" });
//   }
// });
/**
 * @swagger
 * /api/like/{article_id}:
 *  get:
 *   summary: get the like by id
 *   tags: [Like]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: like Id
 *   responses:
 *       200:
 *         description: The like was successfully retrieved
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Like'
 *       404:
 *         description: The like with that id was not found
 */
router.get("/like/:article_id",  async (req, res) => {
  try {
    const like = await Like.find({articleId: req.params.article_id });

    res.send(like);
  } catch {
    res.status(404).send({ error: "this like does not exist" });
  }
});
/**
 * @swagger
 * /api/like/{article_id}/{user_id}:
 *  get:
 *   summary: get the like by id
 *   tags: [Like]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: like Id
 *   responses:
 *       200:
 *         description: The like was successfully retrieved
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Like'
 *       404:
 *         description: The like with that id was not found
 */
router.get("/like/:article_id/:user_id",async (req, res) => {
  try {
    const like = await Like.findOne({ articleId: req.params.article_id, userId: req.params.user_id });
    if(like){
      res.send({liked:true})
    }else res.send({liked:false})
    console.log(like)

  } catch(error) {
    console.log(error)
    res.status(404).send({ error: "this like does not exist" });
  }
});
// create a new like
/**
 * @swagger
 * /api/like:
 *    post:
 *      summary: create a new like
 *      tags: [Like]
 *      requestBody:
 *         type: object
 *         required: true
 *         content:
 *            application/json:
 *                  schema:
 *                     $ref: '#/components/schemas/Like'
 *      responses:
 *         200:
 *            description: The like was successfully created
 *            content:
 *               application/json:
 *                    schemas:
 *                        $ref: '#/components/schemas/Like'
 *         500:
 *            description: Server Error
 *
 *
 */
router.post("/like/:id", authenticateToken, async (req, res) => {
  const like = new Like({
    articleId: req.params.id,
    userId: req.user.id,
    likeType: req.body.likeType,
  });
  try {
    await like.save();
    return res.status(200).send(like);
  } catch {
    return res.status(400);
  }
});


// Deleting a like route

/**
 * @swagger
 * /api/like/{id}:
 *  delete:
 *   summary: delete the like by id
 *   tags: [Like]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: like Id
 *   responses:
 *       204:
 *         description: The like was successfully deleted
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Like'
 *       404:
 *         description: The like with that id was not found
 */
router.delete("/like/:article_id/:user_id", async (req, res) => {
  try {
    await Like.deleteOne({ article_id: req.params.article_id, userId: req.params.user_id});
    res.status(204).send();
  } catch {
    res.status(404).send({ error: "That like does not exist " });
  }
});
/**
 * @swagger
 * /api/like/{id}:
 *  delete:
 *   summary: delete the like by id
 *   tags: [Like]
 *   parameters:
 *      - in: path
 *        name: id
 *        schema:
 *           type: string
 *        required: true
 *        description: like Id
 *   responses:
 *       204:
 *         description: The like was successfully deleted
 *         contents:
 *            application/json:
 *                schema:
 *                   $ref: '#/components/schemas/Like'
 *       404:
 *         description: The like with that id was not found
 */
router.delete("/like/:id", async (req, res) => {
  try {
    await Like.deleteOne({ _id: req.params.id });
    res.status(204).send();
  } catch {
    res.status(404).send({ error: "That like does not exist " });
  }
});
